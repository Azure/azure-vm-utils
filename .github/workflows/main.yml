name: Main CI
on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.sha }}
        fetch-depth: 0
        fetch-tags: true
    - name: Get tags from upstream, if needed
      if: github.repository != 'Azure/azure-vm-utils'
      run: |
        git remote add upstream https://github.com/Azure/azure-vm-utils.git
        git fetch upstream --tags
    - name: Setup
      run: |
        sudo apt update
        sudo apt install gcc pandoc cmake -y
    - name: Build & install project with cmake
      run: |
        cmake -B build -S .
        make -C build
        sudo make -C build install
    - name: Verify installation
      run: |
        test -f /usr/local/sbin/azure-nvme-id
        test -f /usr/local/share/man/man8/azure-nvme-id.8
        test -f /usr/local/lib/udev/rules.d/80-azure-disk.rules
        azure-nvme-id --version
    - name: Verify manpages are not generated by default
      run: |
        rm -rf build
        cmake -B build -S .
        make -C build
        if grep -c "Pandoc" build/doc/azure-nvme-id.8; then echo "manpage unexpectedly generated by pandoc"; exit 1; fi
    - name: Verify manpages are not generated with -DGENERATE_MANPAGES=0
      run: |
        rm -rf build
        cmake -DGENERATE_MANPAGES=0 -B build -S .
        make -C build
        if grep -c "Pandoc" build/doc/azure-nvme-id.8; then echo "manpage unexpectedly generated by pandoc"; exit 1; fi
    - name: Verify manpages are generated with -DGENERATE_MANPAGES=1
      run: |
        rm -rf build
        cmake -DGENERATE_MANPAGES=1 -B build -S .
        make -C build
        if ! grep -c "Pandoc" build/doc/azure-nvme-id.8; then echo "manpage not generated by pandoc"; exit 1; fi
    - name: Run tests
      run: |
        set -x
        sudo apt install -y libcmocka-dev cppcheck clang-format
        rm -rf build
        cmake -DENABLE_TESTS=1 -B build -S .
        cd build
        make
        ctest --verbose -j
    - name: Check source formatting with clang-format
      run: |
        make -C build check-clang-format || (echo "Run 'make clang-format' to fix formatting issues" && exit 1)
    - name: Check cppcheck
      run: |
        make -C build cppcheck
    - name: Check python scripts
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -r selftest/test-requirements.txt
        make -C build python-lint
